//
//Copyright 2023 The Kubernetes Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.0
// source: pkg/cpusetupdater/cpusetupdater.proto

package cpusetupdater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Allocate_UpdateCPUSet_FullMethodName = "/cpusetupdater.Allocate/UpdateCPUSet"
)

// AllocateClient is the client API for Allocate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocateClient interface {
	UpdateCPUSet(ctx context.Context, in *CpusetRequest, opts ...grpc.CallOption) (*CpusetResponse, error)
}

type allocateClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocateClient(cc grpc.ClientConnInterface) AllocateClient {
	return &allocateClient{cc}
}

func (c *allocateClient) UpdateCPUSet(ctx context.Context, in *CpusetRequest, opts ...grpc.CallOption) (*CpusetResponse, error) {
	out := new(CpusetResponse)
	err := c.cc.Invoke(ctx, Allocate_UpdateCPUSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocateServer is the server API for Allocate service.
// All implementations must embed UnimplementedAllocateServer
// for forward compatibility
type AllocateServer interface {
	UpdateCPUSet(context.Context, *CpusetRequest) (*CpusetResponse, error)
	mustEmbedUnimplementedAllocateServer()
}

// UnimplementedAllocateServer must be embedded to have forward compatible implementations.
type UnimplementedAllocateServer struct {
}

func (UnimplementedAllocateServer) UpdateCPUSet(context.Context, *CpusetRequest) (*CpusetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCPUSet not implemented")
}
func (UnimplementedAllocateServer) mustEmbedUnimplementedAllocateServer() {}

// UnsafeAllocateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocateServer will
// result in compilation errors.
type UnsafeAllocateServer interface {
	mustEmbedUnimplementedAllocateServer()
}

func RegisterAllocateServer(s grpc.ServiceRegistrar, srv AllocateServer) {
	s.RegisterService(&Allocate_ServiceDesc, srv)
}

func _Allocate_UpdateCPUSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpusetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocateServer).UpdateCPUSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Allocate_UpdateCPUSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocateServer).UpdateCPUSet(ctx, req.(*CpusetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Allocate_ServiceDesc is the grpc.ServiceDesc for Allocate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Allocate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cpusetupdater.Allocate",
	HandlerType: (*AllocateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCPUSet",
			Handler:    _Allocate_UpdateCPUSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cpusetupdater/cpusetupdater.proto",
}
