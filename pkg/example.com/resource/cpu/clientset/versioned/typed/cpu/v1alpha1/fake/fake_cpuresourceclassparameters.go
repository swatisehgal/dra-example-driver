/*
 * Copyright 2023 The Kubernetes Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/kubernetes-sigs/dra-example-driver/api/example.com/resource/cpu/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCpuResourceClassParameters implements CpuResourceClassParametersInterface
type FakeCpuResourceClassParameters struct {
	Fake *FakeCpuV1alpha1
}

var cpuresourceclassparametersResource = schema.GroupVersionResource{Group: "cpu.resource.example.com", Version: "v1alpha1", Resource: "cpuresourceclassparameters"}

var cpuresourceclassparametersKind = schema.GroupVersionKind{Group: "cpu.resource.example.com", Version: "v1alpha1", Kind: "CpuResourceClassParameters"}

// Get takes name of the cpuResourceClassParameters, and returns the corresponding cpuResourceClassParameters object, and an error if there is any.
func (c *FakeCpuResourceClassParameters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.CpuResourceClassParameters, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(cpuresourceclassparametersResource, name), &v1alpha1.CpuResourceClassParameters{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CpuResourceClassParameters), err
}

// List takes label and field selectors, and returns the list of CpuResourceClassParameters that match those selectors.
func (c *FakeCpuResourceClassParameters) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.CpuResourceClassParametersList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(cpuresourceclassparametersResource, cpuresourceclassparametersKind, opts), &v1alpha1.CpuResourceClassParametersList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.CpuResourceClassParametersList{ListMeta: obj.(*v1alpha1.CpuResourceClassParametersList).ListMeta}
	for _, item := range obj.(*v1alpha1.CpuResourceClassParametersList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cpuResourceClassParameters.
func (c *FakeCpuResourceClassParameters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(cpuresourceclassparametersResource, opts))
}

// Create takes the representation of a cpuResourceClassParameters and creates it.  Returns the server's representation of the cpuResourceClassParameters, and an error, if there is any.
func (c *FakeCpuResourceClassParameters) Create(ctx context.Context, cpuResourceClassParameters *v1alpha1.CpuResourceClassParameters, opts v1.CreateOptions) (result *v1alpha1.CpuResourceClassParameters, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(cpuresourceclassparametersResource, cpuResourceClassParameters), &v1alpha1.CpuResourceClassParameters{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CpuResourceClassParameters), err
}

// Update takes the representation of a cpuResourceClassParameters and updates it. Returns the server's representation of the cpuResourceClassParameters, and an error, if there is any.
func (c *FakeCpuResourceClassParameters) Update(ctx context.Context, cpuResourceClassParameters *v1alpha1.CpuResourceClassParameters, opts v1.UpdateOptions) (result *v1alpha1.CpuResourceClassParameters, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(cpuresourceclassparametersResource, cpuResourceClassParameters), &v1alpha1.CpuResourceClassParameters{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CpuResourceClassParameters), err
}

// Delete takes name of the cpuResourceClassParameters and deletes it. Returns an error if one occurs.
func (c *FakeCpuResourceClassParameters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(cpuresourceclassparametersResource, name), &v1alpha1.CpuResourceClassParameters{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCpuResourceClassParameters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(cpuresourceclassparametersResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.CpuResourceClassParametersList{})
	return err
}

// Patch applies the patch and returns the patched cpuResourceClassParameters.
func (c *FakeCpuResourceClassParameters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.CpuResourceClassParameters, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(cpuresourceclassparametersResource, name, pt, data, subresources...), &v1alpha1.CpuResourceClassParameters{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CpuResourceClassParameters), err
}
